"""
=====================================
Test cases for add integer function
=====================================

>>> add_integer= __import__ ('0-add_integer').add_integer
>>> f = __import__('0-add_integer').add_integer.__doc__
>>> len(f) > 1
True

>>> l = __import__('0-add_integer').__doc__
>>> len(l) > 1
True

add two types for integer
===========================

>>> add_integer(1,1)
2

>>> add_integer(7,6.2)
13

>>> add_integer(1000000000000,60000000000)
1060000000000

>>> add_integer(2)
100

add float
==========
>>> add_integer(1.5,4)
5

add signed integer
===================
>>> add_integer(5,-5)
0

>>> add_integer(-5,7)
2

TypeError handling
=====================

>>> add_integer('a',1)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer(1,'b')
Traceback (most recent call last):
    ...
TypeError: b must be an integer

>>> add_integer()
Traceback (most recent call last):
    ...
TypeError: add_integer() missing 1 required positional argument: 'a'

>>> add_integer(float('inf'), 5)
Traceback (most recent call last):
    ...
OverflowError: cannot convert float infinity to integer

>>> add_integer(1, float('NaN'))
Traceback (most recent call last):
    ...
ValueError: cannot convert float NaN to integer

"""
